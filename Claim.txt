Project Title: MIPS Assembler

Project Description: The goal of this project is to build a MIPS assembler in C++. The assembler should be able to read MIPS assembly language code and translate it into machine code that can be executed on a MIPS processor. The assembler should support a subset of the MIPS instruction set, including arithmetic, logical, load/store, and branch instructions.

Project Team:
K.Sravanthi
2101cs35.


Files:
==========
*All the files i submitted, asm.c and emu.c and claims.txt, have my name and student id at the start, along with a declaration of authorship.

The evidence for Assembler including the output files from the X  test examples has also been uploaded. They are test1(3 output files), test2(3 output files), test3
(1 output file), memcpy(3 output files) and triangle(3 output files). All the test files have been tested and work properly. As for the evidence for the emulator is uploaded
with two output files, memcpy.txt and triangle.txt.

*Both of my c programs did not show any errors and warnings when i compiled it with
gcc -std=c89 -pedantic and gcc -std=c89 -pedantic -W -Wall -Wpointer-arith -Wwrite-strings -Wstrict-prototypes standard  or equilvalent ....or gcc ... or g++

*Two programs are compilable with gcc asm.c -o asm and gcc emu.c -o emu.


=============================
Program format and structure:
=============================
1. The assembler:

    * with two data structures to store respectively labels and mnemonic table with expected operands.
    * uses a single routine for both passes.
    * detects label erros.
    * consistent and sensible formatting with sensible program structure. 
    * sensible variable, function & type names with explanatory comments.
		* advanced listing file.
		* assembles test programs.
	  * can implements and demonstrates the instruction SET.

2. The emulator ( if you are submitting) :

		* with three data structures to store respectively memory, mnemonic table with expected operands
		  and a linked list structure word.
    * loads object file, 
    * by giving the instructions like "-befor/-after" , the program can produce memory dump before/after execution.
    * by giving the instruction like "-trace", the program prints the result of program executed.
    * detects errant programs.



=============================
Testing:
=============================

1. The assembler:

I have tested  2 examples shown as below. The errors only occurred in the file test2.asm and 
the program immediately stopped on the second pass. 

The 1st one was tested without any errors detected and produced three output files, listing file, 
error log file and machine readable object file, for each example. 

#Input: input1.txt(without any error)

#Input: input2.txt(with error)


2.The Emulator:
Am unable to build an emulator within the given time.
